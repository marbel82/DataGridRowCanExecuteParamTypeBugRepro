<Window x:Class="DataGridRowCanExecuteParamTypeBugRepro.DelayedDataContextSwitching"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DataGridRowCanExecuteParamTypeBugRepro"
        mc:Ignorable="d"
        Title="DelayedDataContextSwitching - Example 1 - DelegateCommand&lt;object&gt;" Height="450" Width="800">
    <DockPanel>
        <StackPanel Margin="5">
            <Button Content="Switch" Click="SwitchButton_Click"/>
            <Button Content="Add" Click="AddButton_Click"/>
            <Button Content="Remove" Click="RemoveButton_Click"/>
            <Button Content="GC" Click="GCButton_Click"/>
        </StackPanel>
        <TextBlock DockPanel.Dock="Top" Text="{Binding Title}"/>
        <!-- Curiosity: When you change CanUserAddRows to True, and see CanExecute parameter type, the type will be MS.Internal.NamedObject. But this is not surprising. You need to implement the InitializingNewItem event define your own type. -->
        
        <DataGrid x:Name="dataGrid" ItemsSource="{Binding Items}" CanUserAddRows="False">
            <DataGrid.Columns>
                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Remove" Command="{Binding DataContext.RemoveCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </DockPanel>
</Window>
